package app.uvsy.model;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGenerateStrategy;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBGeneratedUuid;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConvertedEnum;
import lombok.Data;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;

@Data
@DynamoDBTable(tableName = "student-events")
public class Event {

    @DynamoDBHashKey(attributeName = "user_id")
    private String userId;

    @DynamoDBRangeKey(attributeName = "event_id")
    @DynamoDBGeneratedUuid(value = DynamoDBAutoGenerateStrategy.CREATE)
    private String eventId;

    @DynamoDBAttribute(attributeName = "title")
    private String title;

    @DynamoDBAttribute(attributeName = "description")
    private String description;

    @DynamoDBAttribute(attributeName = "event_type")
    @DynamoDBTypeConvertedEnum
    private EventType eventType;

    @DynamoDBAttribute(attributeName = "date")
    private Date date;

    @DynamoDBAttribute(attributeName = "time_to")
    private int timeTo;

    @DynamoDBAttribute(attributeName = "time_from")
    private int timeFrom;

    @DynamoDBAttribute(attributeName = "updated_at")
    @DynamoDBAutoGeneratedTimestamp(strategy = DynamoDBAutoGenerateStrategy.ALWAYS)
    private Date updatedAt;

    @DynamoDBAttribute(attributeName = "created_at")
    @DynamoDBAutoGeneratedTimestamp(strategy = DynamoDBAutoGenerateStrategy.CREATE)
    private Date createdAt;

    public boolean belongsToRange(Date dateFrom, Date dateTo) {
        if (date != null) {
            if (dateFrom != null && dateTo != null) {
                Instant instantFrom = dateFrom.toInstant().truncatedTo(ChronoUnit.DAYS);
                Instant instantTo = dateTo.toInstant().truncatedTo(ChronoUnit.DAYS);
                Instant instantOfEvent = date.toInstant().truncatedTo(ChronoUnit.DAYS);
                return (instantFrom.equals(instantOfEvent) || instantFrom.isBefore(instantOfEvent)) &&
                        (instantTo.equals(instantOfEvent) || instantTo.isAfter(instantOfEvent));
            } else if (dateFrom != null) {
                Instant instantFrom = dateFrom.toInstant().truncatedTo(ChronoUnit.DAYS);
                Instant instantOfEvent = date.toInstant().truncatedTo(ChronoUnit.DAYS);
                return (instantFrom.equals(instantOfEvent) || instantFrom.isBefore(instantOfEvent));
            } else if (dateTo != null) {
                Instant instantTo = dateTo.toInstant().truncatedTo(ChronoUnit.DAYS);
                Instant instantOfEvent = date.toInstant().truncatedTo(ChronoUnit.DAYS);
                return (instantTo.equals(instantOfEvent) || instantTo.isAfter(instantOfEvent));
            }
            return Boolean.TRUE;
        }
        return Boolean.FALSE;
    }

}
